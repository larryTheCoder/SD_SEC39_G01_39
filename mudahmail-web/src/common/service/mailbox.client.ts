// @generated by protobuf-ts 2.9.1 with parameter optimize_code_size
// @generated from protobuf file "mailbox.proto" (package "org.mudahmail.rpc", syntax proto3)
// tslint:disable
import { Server } from "./mailbox";
import type { BiometricsDeletionResponse } from "./mailbox";
import type { BiometricsInfoResponse } from "./mailbox";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { DoorRequestResponse } from "./mailbox";
import type { DoorLockStatusRequest } from "./mailbox";
import type { MailboxStatesResponse } from "./mailbox";
import type { MailboxStatesRequest } from "./mailbox";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Mailbox } from "./mailbox";
import type { Empty } from "./google/protobuf/empty";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { NotificationRequest } from "./mailbox";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service org.mudahmail.rpc.Mailbox
 */
export interface IMailboxClient {
    /**
     * @generated from protobuf rpc: startEventListener(stream org.mudahmail.rpc.NotificationRequest) returns (stream org.mudahmail.rpc.NotificationRequest);
     */
    startEventListener(options?: RpcOptions): DuplexStreamingCall<NotificationRequest, NotificationRequest>;
    /**
     * @generated from protobuf rpc: testEventListener(org.mudahmail.rpc.NotificationRequest) returns (google.protobuf.Empty);
     */
    testEventListener(input: NotificationRequest, options?: RpcOptions): UnaryCall<NotificationRequest, Empty>;
}
/**
 * @generated from protobuf service org.mudahmail.rpc.Mailbox
 */
export class MailboxClient implements IMailboxClient, ServiceInfo {
    typeName = Mailbox.typeName;
    methods = Mailbox.methods;
    options = Mailbox.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: startEventListener(stream org.mudahmail.rpc.NotificationRequest) returns (stream org.mudahmail.rpc.NotificationRequest);
     */
    startEventListener(options?: RpcOptions): DuplexStreamingCall<NotificationRequest, NotificationRequest> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<NotificationRequest, NotificationRequest>("duplex", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: testEventListener(org.mudahmail.rpc.NotificationRequest) returns (google.protobuf.Empty);
     */
    testEventListener(input: NotificationRequest, options?: RpcOptions): UnaryCall<NotificationRequest, Empty> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<NotificationRequest, Empty>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service org.mudahmail.rpc.Server
 */
export interface IServerClient {
    /**
     * @generated from protobuf rpc: getMailboxStates(org.mudahmail.rpc.MailboxStatesRequest) returns (org.mudahmail.rpc.MailboxStatesResponse);
     */
    getMailboxStates(input: MailboxStatesRequest, options?: RpcOptions): UnaryCall<MailboxStatesRequest, MailboxStatesResponse>;
    /**
     * @generated from protobuf rpc: setDoorLockStatus(org.mudahmail.rpc.DoorLockStatusRequest) returns (org.mudahmail.rpc.DoorRequestResponse);
     */
    setDoorLockStatus(input: DoorLockStatusRequest, options?: RpcOptions): UnaryCall<DoorLockStatusRequest, DoorRequestResponse>;
    /**
     * @generated from protobuf rpc: getBiometricList(google.protobuf.Empty) returns (stream org.mudahmail.rpc.BiometricsInfoResponse);
     */
    getBiometricList(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, BiometricsInfoResponse>;
    /**
     * @generated from protobuf rpc: deleteBiometricId(google.protobuf.Empty) returns (org.mudahmail.rpc.BiometricsDeletionResponse);
     */
    deleteBiometricId(input: Empty, options?: RpcOptions): UnaryCall<Empty, BiometricsDeletionResponse>;
}
/**
 * @generated from protobuf service org.mudahmail.rpc.Server
 */
export class ServerClient implements IServerClient, ServiceInfo {
    typeName = Server.typeName;
    methods = Server.methods;
    options = Server.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: getMailboxStates(org.mudahmail.rpc.MailboxStatesRequest) returns (org.mudahmail.rpc.MailboxStatesResponse);
     */
    getMailboxStates(input: MailboxStatesRequest, options?: RpcOptions): UnaryCall<MailboxStatesRequest, MailboxStatesResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<MailboxStatesRequest, MailboxStatesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: setDoorLockStatus(org.mudahmail.rpc.DoorLockStatusRequest) returns (org.mudahmail.rpc.DoorRequestResponse);
     */
    setDoorLockStatus(input: DoorLockStatusRequest, options?: RpcOptions): UnaryCall<DoorLockStatusRequest, DoorRequestResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<DoorLockStatusRequest, DoorRequestResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: getBiometricList(google.protobuf.Empty) returns (stream org.mudahmail.rpc.BiometricsInfoResponse);
     */
    getBiometricList(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, BiometricsInfoResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, BiometricsInfoResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: deleteBiometricId(google.protobuf.Empty) returns (org.mudahmail.rpc.BiometricsDeletionResponse);
     */
    deleteBiometricId(input: Empty, options?: RpcOptions): UnaryCall<Empty, BiometricsDeletionResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, BiometricsDeletionResponse>("unary", this._transport, method, opt, input);
    }
}
